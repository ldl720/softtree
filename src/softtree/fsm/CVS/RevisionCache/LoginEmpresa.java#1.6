package softtree.fsm;

import java.sql.SQLException;
import java.util.ResourceBundle;
import libClass.conec.ConexionBdg;
import libClass.exc.ConstructorSelectException;
import libClass.exc.DBClosedException;
import libClass.exc.InvalidDateException;
import libClass.exc.NotFoundException;
import libClass.fsm.Empresa;
import libClass.fsm.EmpresaPConexion;
import libClass.fsm.Usuario;
import libClass.obj.ObjectApplication;
import libClass.swing.ILogin;
import libClass.util.GenericLogin;
import softtree.Main;
import softtree.ui.MainMDI;
import splashwindow.windows.DefaultSplashWindow;

/**
 *
 * @author López Leandro
 * @version $Revision: 1.6 $; $Date: 2012/12/02 16:39:11 $
 */
public class LoginEmpresa extends GenericLogin implements ILogin {

	public LoginEmpresa(ConexionBdg con, ResourceBundle rb,
		Class aClassForNodePreferences, boolean aRemoteConnection) {

		setConexionDBSistema(con);
		setRemoteConnection(aRemoteConnection);
		setClassForNodePreferences(aClassForNodePreferences);
		setRecursos(rb);
		initWorkWithEnterprise();
		controlAccessOfUser();
	}

	public LoginEmpresa(ConexionBdg con, ResourceBundle rb,
		Class aClassForNodePreferences, boolean aApplet, boolean aRemoteConnection) {

		setApplet(aApplet);
		setConexionDBSistema(con);
		setRemoteConnection(aRemoteConnection);
		setClassForNodePreferences(aClassForNodePreferences);
		setRecursos(rb);
		initWorkWithEnterprise();
		controlAccessOfUser();
	}

	/**
	 * La implementación de este método es la encargada de decirle a la
	 * clase que se debe hacer en el caso de que un curso de acción se haya
	 * realizado correctamente.
	 */
	@Override
	public void startApplication() throws ConstructorSelectException,
		NotFoundException, NullPointerException, DBClosedException, SQLException, InvalidDateException {

		if (getEmpresaPConexion() != null) {
			boolean flagConec = initConectToDBEnterprise(getEmpresaPConexion());

			if (flagConec) {
				//Cierro la conexión activa a la base de datos de datos de sistem
				//porque a partir de este punto no se la utiliza mas.
				closeConnectDBSystem();

				ObjectApplication application = new ObjectApplication(
					getConexionDBEmpresa(), getRecursos(), Main.class);

				String login = getEmpresaPConexion().getUsuarioPConexion().getLogin();
				String passwd = getEmpresaPConexion().getUsuarioPConexion().getPassword();

				application.setActiveEnterprise(new Empresa(1));
				application.setParametros(new GeneralParameters());
				application.setUsuario(new Usuario(login, passwd));
				application.setApplet(isApplet());
				application.startCheckConnection();

				MainMDI mainMDI = new MainMDI(getEmpresaPConexion().getNombre(), getURLFileWallpaper(getEmpresaPConexion()));
				mainMDI.setVisible(true);
			} else {
				cancelApplication();
			}
		} else {
			cancelApplication();
		}
	}

	@Override
	public void cancelApplication() {
		super.cancelApplication();

		if (DefaultSplashWindow.getInstance() != null) {
			DefaultSplashWindow.getInstance().close();
		}

		System.exit(0);
	}

	@Override
	public void setSelectedEnterprise(EmpresaPConexion aSelectedEnterprise) {
		setEmpresaPConexion(aSelectedEnterprise);
	}

	@Override
	public Object getObjISystemIdentification() {
		return new EmpresaPConexion();
	}
}

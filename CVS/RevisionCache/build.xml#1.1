<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="dl" default="default" basedir=".">
	<description>Builds, tests, and runs the project dl.</description>
	<import file="nbproject/build-impl.xml"/>

	<!--
	El código que sigue a continuación, permite construir el archivo "MANIFEST.MF"
	con todos los parámetros que éste debe tener. Entre otras cosas arma el
	Class-Path que nesecita la aplicacion para ser ejecutada desde fuera de
	NetBeans. Ademas asigna un número de versión al paquete de clases.
	-->
	<target name="-pre-compile">
		<propertyfile	file="${src.dir}/dl/archivos/dl.properties">
			<entry  key="version" value="${application.version}"/>
		</propertyfile>
	</target>

	<target name="-pre-jar">
		<tstamp>
			<format property="TODAY_AR" pattern="d-MMMM-yyyy" locale="es,AR"/>
		</tstamp>

		<!--
		<pathconvert pathsep=" " property="jar.classpath">
			<path path="${run.classpath}"/>
			<chainedmapper>
				<flattenmapper/>
				<globmapper from="*" to="lib/*"/>
			</chainedmapper>
		</pathconvert>
		-->

		<manifest file="MANIFEST.MF">
			<!--
			<attribute name="Class-Path" value="${manifest.classpath}"/>
			-->
			<section name="dl">
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Specification-Title" value="DeepLogic S.R.L."/>
				<attribute name="Specification-Version" value="${application.version}"/>
				<attribute name="Specification-Vendor" value="DeepLogic S.R.L."/>
				<attribute name="Implementation-Title" value="DeepLogic S.R.L."/>
				<attribute name="Implementation-Version" value="${application.version} ${TODAY}"/>
				<attribute name="Implementation-Vendor" value="DeepLogic S.R.L."/>
			</section>
		</manifest>
	</target>

  <!--
  SE COPIA LOS ARCHIVOS setup.jnlp Y LOS png QUE NO COPIA LA COMPILACION
  AUTOMATICA DE JAVA WEB START AL DIR DE DISTRIBUCCIÓN.
  -->
	<target name="-post-jar">
		<echo message="Copiando setup.jnlp y *.png para Java Web Start"/>
		<copy description="Copiando setup.jnlp" file="${basedir}/setup.jnlp" todir="${dist.jar.dir}"/>
		<copy description="Copiando dl48.png" file="${basedir}/dl48.png" todir="${dist.jar.dir}"/>
		<copy description="Copiando dl64.png" file="${basedir}/dl64.png" todir="${dist.jar.dir}"/>
		<copy description="Copiando dlSetup32.png" file="${basedir}/dlSetup32.png" todir="${dist.jar.dir}"/>
		<copy description="Copiando dlSetup48.png" file="${basedir}/dlSetup48.png" todir="${dist.jar.dir}"/>
		<copy description="Copiando dlSetup64.png" file="${basedir}/dlSetup64.png" todir="${dist.jar.dir}"/>
	</target>

	<!--

	There exist several targets which are by default empty and which can be
	used for execution of your tasks. These targets are usually executed
	before and after some main targets. They are:

		-pre-init:                 called before initialization of project properties
		-post-init:                called after initialization of project properties
		-pre-compile:              called before javac compilation
		-post-compile:             called after javac compilation
		-pre-compile-single:       called before javac compilation of single file
		-post-compile-single:      called after javac compilation of single file
		-pre-compile-test:         called before javac compilation of JUnit tests
		-post-compile-test:        called after javac compilation of JUnit tests
		-pre-compile-test-single:  called before javac compilation of single JUnit test
		-post-compile-test-single: called after javac compilation of single JUunit test
		-pre-jar:                  called before JAR building
		-post-jar:                 called after JAR building
		-post-clean:               called after cleaning build products

	(Targets beginning with '-' are not intended to be called on their own.)

	Example of inserting an obfuscator after compilation could look like this:

			<target name="-post-compile">
					<obfuscate>
							<fileset dir="${build.classes.dir}"/>
					</obfuscate>
			</target>

	For list of available properties check the imported
	nbproject/build-impl.xml file.


	Another way to customize the build is by overriding existing main targets.
	The targets of interest are:

		-init-macrodef-javac:     defines macro for javac compilation
		-init-macrodef-junit:     defines macro for junit execution
		-init-macrodef-debug:     defines macro for class debugging
		-init-macrodef-java:      defines macro for class execution
		-do-jar-with-manifest:    JAR building (if you are using a manifest)
		-do-jar-without-manifest: JAR building (if you are not using a manifest)
		run:                      execution of project
		-javadoc-build:           Javadoc generation
		test-report:              JUnit report generation

	An example of overriding the target for project execution could look like this:

			<target name="run" depends="dl-impl.jar">
					<exec dir="bin" executable="launcher.exe">
							<arg file="${dist.jar}"/>
					</exec>
			</target>

	Notice that the overridden target depends on the jar target and not only on
	the compile target as the regular run target does. Again, for a list of available
	properties which you can use, check the target you are overriding in the
	nbproject/build-impl.xml file.

	-->
</project>
